#!/usr/bin/env python

PACKAGE = 'simple_local_planner'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


gen.add("max_trans_acc", double_t, 0, "The translational acceleration limit of the robot", 1.0, 0, 20.0)
gen.add("max_rot_acc", double_t, 0, "The rotational acceleration limit of the robot", 1.0, 0, 20.0)
gen.add("max_trans_vel", double_t, 0, "The maximum translation velocity for the robot in m/s", 0.6, 0, 10.0)
gen.add("min_trans_vel", double_t, 0, "The minimum translation velocity for the robot in m/s", 0.1, 0, 10.0)
gen.add("max_rot_vel", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  0.8, 0, 20.0)
gen.add("min_rot_vel", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s",  0.3, 0, 20.0)
gen.add("min_in_place_rot_vel", double_t, 0, "The absolute value of the minimum in-place rotational velocity the controller will explore", 0.5, 0, 20.0)
gen.add("yaw_goal_tolerance", double_t, 0, "Tolerance in angle (rad/s) to reach the goal", 0.12, 0, 3.0)
gen.add("xy_goal_tolerance", double_t, 0, "Tolerance in distance (m) to reach the goal", 0.20, 0, 2.0)
gen.add("wp_tolerance", double_t, 0, "Distance from the robot to the point of the global path to take", 0.5, 0, 2.0)
gen.add("sim_time", double_t, 0, "The amount of time to expand the robot movement in seconds", 0.5, 0, 10)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0, 5)
gen.add("angular_sim_granularity", double_t, 0, "The distance between simulation points for angular velocity should be small enough that the robot doesn't hit things", 0.025, 0, pi/2)
gen.add("sample_angular_vels", bool_t, 0, "Whether or not to look for a valid command by sampling angular velocities", True);
gen.add("use_dwa", bool_t, 0, "Whether or not to use dwa", True);
gen.add("controller_freq", double_t, 0, "controller frequency Hz", 10, 0, 100)

# visualization parameters
gen.add("marker_lifetime", double_t, 0, "Lifetime of eband visualization markers", 0.5, 0.0)

# eband local planner parameters
gen.add("eband_min_relative_overlap", double_t, 0, "Min distance that denotes connectivity between consecutive bubbles", 0.7, 0.0)
gen.add("eband_tiny_bubble_distance", double_t, 0, "Bubble geometric bound regarding tiny bubble distance", 0.01, 0.0)
gen.add("eband_tiny_bubble_expansion", double_t, 0, "Bubble geometric bound regarding tiny bubble expansion", 0.01, 0.0)
gen.add("eband_internal_force_gain", double_t, 0, "Force gain of forces between consecutive bubbles that tend to stretch the elastic band", 1.0, 0.0)
gen.add("eband_external_force_gain", double_t, 0, "Force gain of forces that tend to move the bubbles away from obstacles", 2.0, 0.0)
gen.add("num_iterations_eband_optimization", int_t, 0, "Number of iterations for eband optimization", 3, 1)
gen.add("eband_equilibrium_approx_max_recursion_depth", int_t, 0, "Number of iterations for reaching the equilibrium between internal and external forces", 4, 1)
gen.add("eband_equilibrium_relative_overshoot", double_t, 0, "Maximum relative equlibrium overshoot", 0.75, 0.0)
gen.add("eband_significant_force_lower_bound", double_t, 0, "Minimum magnitude of force that is considered significant and used in the calculations", 0.15, 0.0)
gen.add("costmap_weight", double_t, 0, "Costmap weight factor used in the calculation of distance to obstacles", 10.0, 0.0)


exit(gen.generate(PACKAGE, "simple_local_planner", "SimpleLocalPlanner"))
